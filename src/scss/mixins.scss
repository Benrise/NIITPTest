@function to-rem($px, $current: 16) {
	$rem-value: calc($px / $current) + rem;
	@return $rem-value;
}

@function to-em($px, $current: 16) {
	$result: calc($px / $current) + em;
	@return $result;
}

@mixin transition-all($duration: 0.3s, $timing-function: ease-out) {
	-webkit-transition: all $duration $timing-function;
	-moz-transition: all $duration $timing-function;
	-o-transition: all $duration $timing-function;
	transition: all $duration $timing-function;
}

@mixin body {
	font-weight: 400;
	@include adaptive-value("font-size", 24, 12, 700, 280, 1);
	@include adaptive-value("line-height", 29, 15, 700, 280, 1);
	color: $color-font;
}

@mixin subtitle {
	font-weight: 600;
	@include adaptive-value("font-size", 24, 16);
	@include adaptive-value("line-height", 29, 19);
	color: $color-font;
	opacity: 0.8;
}

@mixin title {
	font-weight: 800;
	@include adaptive-value("font-size", 40, 16, 700, 280, 1);
	@include adaptive-value("line-height", 58, 20, 700, 280, 1);
	color: $color-font;
}

@mixin adaptive-value($property, $start-size, $min-size, $width-from: $container-width, $width-to: $min-width, $keep-size: 0) {
	$add-size: ($start-size - $min-size);

	@if ($width-from == $container-width and $max-width-container == 0) {
		$width-from: $max-width;
	}
	@if ($min-size <= 0) {
		$min-size: 0.0001;
	}
	@if ($start-size <= 0) {
		$start-size: 0.0001;
	}

	$width-from-media: to-em($width-from);
	$width-to-media: to-em($width-to);

	// Source: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: calc(($start-size - $min-size) / ($width-from - $width-to));
	$y-intersection: -$width-to * $slope + $min-size;
	$fly-value: #{to-rem($y-intersection)}" + " #{($slope * 100)}vw;

	$property-value: #{"clamp(" to-rem($min-size) "," $fly-value "," to-rem($start-size) ")"};

	@if ($min-size > $start-size) {
		$property-value: #{"clamp(" to-rem($start-size) "," $fly-value "," to-rem($min-size) ")"};
	}

	@if $width-from == $container-width or $width-from == $max-width or $keep-size == 1 or $keep-size == 2 {
		@media (min-width: $width-from-media) {
			#{$property}: to-rem($start-size);
		}
	}

	@media (min-width: $width-to-media) and (max-width: $width-from-media) {
		@supports (#{$property}: $property-value) {
			#{$property}: $property-value;
		}
		@supports not (#{$property}: $property-value) {
			#{$property}: calc(
				#{to-rem($min-size)} + #{$add-size} * (100vw - #{to-rem($width-to)}) / #{(calc($width-from / 16) -  calc($width-to / 16))}
			);
		}
	}

	@if $width-to == $min-width or $keep-size == 1 or $keep-size == 3 {
		@media (max-width: $width-to-media) {
			#{$property}: to-rem($min-size);
		}
	}
}